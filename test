

Summarize all the inputs

CSV  -> Product.ServiceName.csv


1) ENV List
	ENVLIST=DEV,TEST,STAGE,PROD
	Domain=
	TestType=smoke,ept,functional,regression
	DB Connect string without password for each environment
	DB password for each db / environment


2) APPLIST
	Domain=Digital
		Product=FAD
			APPLICATION=FAD
				DEV_REPO:
				TEST_REPO:
				ServerAddress:
				headerAuth:
				DBSTRING
					DEV:
					TEST
					STAGE
					PROD
			APPLICATION=MHR
				DEV_REPO:
				TEST_REPO:
				ServerAddress:
				headerAuth:
				DBSTRING
					DEV:
					TEST
					STAGE
					PROD			
	Domain=PEGA
		Product=PEGA
			APPLICATION=PEGA
				DEV_REPO:
				TEST_REPO:
				ServerAddress:
				headerAuth:
				DBSTRING
					DEV:
					TEST
					STAGE
					PROD
			APPLICATION=MHR
				DEV_REPO:
				TEST_REPO:
				ServerAddress:
				headerAuth:
				DBSTRING
					DEV:
					TEST
					STAGE
					PROD			
	Domain=EDI
		Product=EDIRT
			APPLICATION= EDI27X	
				DEV_REPO:
				TEST_REPO:
				ServerAddress:
				headerAuth:
				DBSTRING
					DEV:
					TEST
					STAGE
					PROD
		Product=EDIBATCH
			APPLICATION= EDI834
				DEV_REPO:
				TEST_REPO:
				ServerAddress:
				headerAuth:
				DBSTRING
					DEV:
					TEST
					STAGE
					PROD
3) SETTINGS
	Name product gets picked up from the APP List
		Product=FAD
			APPLICATION=FAD
				SERVICES:
				ServiceURL:
				ServerAddress:
				headerAuth:
				env specific

4)	TC CSV File
	Product_APPLICATION_SERVICENAME_Smoke.csv
	
5) RUN ID
    Global for the Domain
	Functional for the 
	System Generated for EACH Domain and testType.
	
6) Auth
	a. Client Id/pwd
	b. Cookie using username and password
	c. OAuth
	d. combinations
	Consider login @ every test case and otherwise	

Steps:
1) Read CommandLine argument -> Get ENV, TestType, API, and Store in TitleParams. 
    Load .env file and validate.
	Remove settings.yaml from parameter, instead get product name.
	check and confirm the given values are acceptable with little modification.
	Get CSV File(s) for API. Multiple api with the same file? Consider adding Product as option.
2) Search for CSV file headers.  Product_APPLICATION_SERVICENAME_<testType>.csv
	if no multiple files with the same name, proceed.
	If there are multiple files?
3) Load CSV FILE -> Get Product,Application,servicename and Store in TitleParams. 
4) Search and Get the file for Product_APPLICATION_SERVICENAME_settings.yaml
	Get auth details.
	Load all the values in TitleParams.
5) Load .ENV db params FOR ENV / SERVICES /PRODUCT at any level and check connectivity for inbound and outbound.
6) Read CSV file data and create Test Factory.
7) Get RunID



{
	"product": {
		"name": "PEGA-WebServices",
		"description": "???.",
		"RunEnv": "OnPrem",
		"maintainers": [
			{
				"name": "Chandra Sarikonda",
				"email": "chandra.sarikonda@blueshieldca.com"
			},
			{
				"name": "DevX Team",
				"email": "devx-testautomationframework-fte@blueshieldca.com"
			}
		],
		"BB": {
			"url": "https://bitbucket.org/blueshieldca/shieldadvisorwebservices/src/master/"
		},
		"ConfluencePage": "https://docs.example.com/api",
		"headers": {
			"content_type": "application/json",
			"accept": "application/json"
		},
		"environments": {
			"testing": {
					"database": {
						"main": "FacetsTestDB",
						"reporting": "MongoTestDB"
					},
					"settings": {
						"base_url": "http://test.api.example.com",
						"api_version": "v1",
						"authentication": {
							"x-ibm-client-id": "b105d15643dd496066c02098630956b0"
							"x-ibm-client-secret": "90e9343d2a8283e3e34df90863d50173"
						}					
					},
					"timeouts": {
						"request_timeout": 3000,
						"connection_timeout": 5000
					},
					"logging": {
						"log_level": "INFO",
						"report_format": "JSON"
					},
					"error_handling": {
						"retry_policy": 3,
						"fallback_url": "http://test.api.example.com/fallback"
					},
					"rate_limiting": 100,
					"mock_data": "path/to/test/mock/data"
				}
			}
		}
	}
}



environments: 
  qa: 
    plan_selection:
      path_to_json: "plan_selection_request.json"
      request_type: "POST"
      headers: 
        x-ibm-client-id: 
        x-ibm-client-secret: 
        Content-Type: "application/json"
      api_base_url: "https://cloud-api-dev.blueshieldca.com/apim-FADProviderMetaData-qa/FADProviderMetaData/api/fad/provider/metadataplans/v2"
    type_head:
      headers: 
        x-ibm-client-id: 
        x-ibm-client-secret: 
        Content-Type: "application/json"
      api_base_url: "https://i-dev.blueshieldca.com/apim-FADProviderSearch-qa/FADProviderSearch/api/fad/provider/typeahead/v1"
    coverage_delegation:
      path_to_json: "coverage_delegate_request.json"
      request_type: "POST"
      headers: 
        x-ibm-client-id: ""
        x-ibm-client-secret: ""
        content-Type: "application/json"
      api_base_url: "https://e/private/opstest/api/bsc/gateway/member/coverages/pcp/goi/delegation/rules/preference/v4"
    db_credentials: 
      facets: 
        username: ${FACETS_USER}
        password: ${FACETS_PASSWORD}
        server: ${FACETS_SERVER}
        port: ${FACETS_PORT}
        dbname: ${FACETS_DB}
        connection_string: 
        dbsource: facets

